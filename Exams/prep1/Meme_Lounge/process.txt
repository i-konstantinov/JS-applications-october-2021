1. Extract project skeleton and examine files

2. Setup NPM project
- npm init -y 
    > install page 
    > install lit-html 
    > i chai 
    > i mocha 
    > i --save-dev playwright-chromium
- run service /own terminal
- run test rever /own terminal
- run  tests /own terminal


3. Analize the HTML and determine templates 

4. Configure routing with placeholder modules
- created lib.js - bridge to outer functions
- created app.js
    - added static page functions for testing routs //page('/', () => console.log('home'))//
    - added page.start()
- added routs in href for every corresponding element in html
- added <script> in <head>
- added view js files containing basic viewPage function for every view
- added view functions to app.js > page('path', viewPage)
    - added id to details & edit /tested with console.log
- got the data container
- added middleware to page

1:06h

5. Implement requests
- created api folder in src
- created api.js module
- created data.js
    - imported * from api.js
    - imported > exported auth functions
    - added endpoint dependencies
    - exported abstract CRUD functions
- tested CRUD functions in app.js via window.api

1:30

6. Implement each view
    a) created for catalog
    b) created for index
    b) created for login
    c) created for register
    d) created for details
    e) created for create
    f) created for edit
    

6.1. Create static templates

6.2. Implement fetch requests
    b) for login
        - added updateNav logic in app.js *
        - added logic for logout in app.js *
    

6.3. Add params to templates
    c) for registerTemplate
        - validation for bad input
    d) for details
        - added Delete logic
    e) for create.js
        - added form-fields validation
    f) for edit
        - ADDED FIELD VALID
    

6.4. Add event listeners (if any)
    b) for login - @submit
    c) for register = @submit
    e) for create - @submit
    f) foir edit = @submit